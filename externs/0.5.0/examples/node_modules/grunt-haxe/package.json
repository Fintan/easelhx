{
  "name": "grunt-haxe",
  "description": "Compile Haxe to JavaScript",
  "version": "0.1.4",
  "homepage": "https://github.com/Fintan/grunt-haxe",
  "author": {
    "name": "Fintan Boyle",
    "email": "fintanboyle@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Fintan/grunt-haxe.git"
  },
  "bugs": {
    "url": "https://github.com/Fintan/grunt-haxe/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Fintan/grunt-haxe/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt": "~0.3.15"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# Grunt-Haxe\n\nCompile Haxe to JavaScript\n\nHaxe is an open-source, multi-platform programming language with many advanced features.  Visit the [Haxe website] [haxe_www] to learn more.  A list of advanced features can be found [here][haxe_features].\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-haxe`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-haxe');\n```\n\n[grunt]: https://github.com/gruntjs/grunt\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\n[haxe_compiler_doc]: http://haxe.org/doc/compiler\n[haxe_www]: http://haxe.org\n[haxe_features]: http://haxe.org/doc/features#language-features\n\n## Documentation\n\n###Overview\n\nInside your grunt.js file, add a section named haxe.  Use this section to define the arguments that will be passed to the [Haxe compiler][haxe_compiler_doc]\n\n\n###Config Examples\n\n\n#### Minimal Example\n\nA project requires at least the following three properties in order to successfully compile:\n\n``` javascript\nhaxe: {\n\tminimal_example: {\n\t\tmain: 'Main', /*name of the startup class*/\n\t\tclasspath:['app'],/*specify folder/s where source code is located*/\n\t\toutput:'dist/output.js' /*compile to this file*/\n\t}\n}\n```\nThe Haxe project called 'minimal_example' can then be compiled using the following command:\n\n```\n$ grunt haxe:minimal_example\n```\n\n\n#### Complete Example\n\nThis example shows all available options for configuring your project;\n\n``` javascript\nhaxe: {\n\tcomplete_example: {\n\t\tmain: 'Main',\n\t\tclasspath:['app'],\n\t\tlibs:['casalib'], /*specify haxelib libraries */\n\t\tflags:['something', 'createjs'], /* define conditional compilation flags */\n\t\tmacros:['Mymacro.doSomethingCool()'], /*call the given macro*/\n\t\tresources:['activity/xml/map-layout.json@map_layout'], /*define named resource files*/\n\t\tmisc:['-debug', \"--dead-code-elimination\", \"--js-modern\"],/* add any other arguments*/\n\t\toutput:'app/scripts/output.js',\n\t\tonError: function (e) {\n\t\t\t/*custom error message */\n\t\t\tconsole.log( 'There was a problem...\\n' + e );\n\t\t}\n\t}\n}\n```\n\n#### Composite Example\n\nThe value of the option property is typically a string that defines the name and location of a file to compile to but it can also be an object literal that in turn contains an output property.  \n\nThe following example shows how to configure debug and release builds for a project by defining common properties for both in a single place.  Unique settings for each build are then nested;\n\n\n``` javascript\nhaxe: {\n\tmulti_target_example: {\n\t\tmain: 'Main',\n\t\tclasspath:['app'],\n\t\toutput:{\n\t\t\tdebug:{\n\t\t\t\tmisc:['-debug'],/*-debug results in a js source map*/\n\t\t\t\toutput: 'dist/output.js'\n\t\t\t},\n\t\t\trelease: {\n\t\t\t\tmisc:[\"--dead-code-elimination\", \"--js-modern\"],\n\t\t\t\toutput: 'app/scripts/output.js'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## License\nCopyright (c) 2012 Fintan Boyle  \nLicensed under the MIT license.\n",
  "_id": "grunt-haxe@0.1.4",
  "_from": "grunt-haxe"
}
