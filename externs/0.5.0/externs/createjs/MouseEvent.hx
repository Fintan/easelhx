package createjs;



/**
*	This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, onMouseOver, onMouseOut and onClick
*	handlers on DisplayObject instances.
*
*/
@:native ("createjs.MouseEvent")
extern class MouseEvent {

	
	/**
	*	@type DisplayObject
	*	The display object this event relates to.
	*
	*/
	public var target:DisplayObject;
	
	/**
	*	@type MouseEvent
	*	The native MouseEvent generated by the browser. The properties and API for this
	*	event may differ between browsers. This property will be null if the
	*	EaselJS property was not directly generated from a native MouseEvent.
	*
	*/
	public var nativeEvent:MouseEvent;
	
	/**
	*	@type Number
	*	The normalized x position on the stage. This will always be within the range 0 to stage width.
	*
	*/
	public var stageX:Float;
	
	/**
	*	@type Number
	*	The normalized y position on the stage. This will always be within the range 0 to stage height.
	*
	*/
	public var stageY:Float;
	
	/**
	*	@type Number
	*	The raw x position relative to the stage. Normally this will be the same as the stageX value, unless
	*	stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	*
	*/
	public var rawX:Float;
	
	/**
	*	@type Number
	*	The raw y position relative to the stage. Normally this will be the same as the stageY value, unless
	*	stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	*
	*/
	public var rawY:Float;
	
	/**
	*	@type String
	*	The type of mouse event. This will be the same as the handler it maps to (onPress,
	*	onMouseDown, onMouseUp, onMouseMove, or onClick).
	*
	*/
	public var type:String;
	
	/**
	*	@type {Boolean}
	*	Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.
	*	For touch pointers, the first pointer in the current stack will be considered the primary pointer.
	*
	*/
	public var primaryPointer:Bool;
	
	/**
	*	@type {Number}
	*	The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system
	*	supplied id value.
	*
	*/
	public var pointerID:Float;

	
	/**
	*	@method clone
	*	Returns a clone of the MouseEvent instance.
	*
	*/
	public function clone ():MouseEvent;
	
	/**
	*	@method initialize
	*	Initialization method.
	*
	*/
	private function initialize ():Dynamic;
	
	/**
	*	@method new
	*	This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, onMouseOver, onMouseOut and onClick
	*	handlers on DisplayObject instances.
	*	@param type (String)  
	*	@param stageX (Number)  
	*	@param stageY (Number)  
	*	@param target (DisplayObject)  
	*	@param nativeEvent (MouseEvent)  
	*	@param pointerID (Number)  
	*	@param primary (Boolean)  
	*	@param rawX (Number)  
	*	@param rawY (Number)  
	*
	*/
	public function new (type:String, stageX:Float, stageY:Float, target:DisplayObject, nativeEvent:MouseEvent, pointerID:Float, primary:Bool, rawX:Float, rawY:Float):Void;
	
	/**
	*	@method toString
	*	Returns a string representation of this object.
	*
	*/
	public function toString ():String;

}